/*
 Usage:
 gradle build - builds code and creates a single jar in build/libs/frostwire.jar
 gradle clean - cleans the build.
 gradle tasks - shows available tasks.

 gradle gettextExtract - extract all the strings from the sourcecode into frostwire.pot
 gradle gettextBundle  - create messages.jar with the extracted strings. 

*/
apply plugin: 'java'

if (!System.getenv('ANT_HOME')?.trim()) { 
    //throw new GradleException("ERROR: ANT_HOME environment variable not set.\n\n(e.g. on MacOSX: /usr/local/Cellar/ant/1.9.3/libexec\n      on Linux:  /usr/share/ant)")
}

if (!new File("../frostwire-common").exists()) {
    throw new GradleException("ERROR: You need to checkout the dependency frostwire-common")
}

if (!new File("../frostwire-jlibtorrent").exists()) {
    throw new GradleException("ERROR: You need to checkout the dependency frostwire-jlibtorrent")
}

sourceCompatibility = 1.7

compileJava {
    options.encoding = '8859_1'
}

// add third party jars to classpath.
dependencies {
    def ant_jar_path = System.getenv('ANT_HOME') + '/lib/ant.jar'
    compile files(new File(ant_jar_path).toURI())
}

sourceSets {
    main {
        java {
            // frostwire-common
            srcDir '../frostwire-common/apache'
            srcDir '../frostwire-common/gson'
            srcDir '../frostwire-common/jdownloader'
            srcDir '../frostwire-common/jmdns'
            srcDir '../frostwire-common/json'
            srcDir '../frostwire-common/libtorrent'
            srcDir '../frostwire-common/mp4parser'
            srcDir '../frostwire-common/vuze'
            srcDir '../frostwire-common/core'

            // frostwire-jlibtorrent
            srcDir '../frostwire-jlibtorrent/src'

            // jars-src (other third parties dependencies, we keep their sources
            // so that we can properly create the .deb sources for debian based mantainers
            // to corroborate we build entirely from source.)
            srcDir 'lib/jars-src/gettext-commons-0_9_5/src/java'
            srcDir 'lib/jars-src/lucene-3.5.0'
            srcDir 'lib/jars-src/h2-1.3.164'
            srcDir 'lib/jars-src/jaudiotagger/src'
            srcDir 'lib/jars-src/slf4j-api/src/main/java'
            srcDir 'lib/jars-src/metadata-extractor-2.6.2-src/Source'

            srcDir 'src'
        }

        resources {
            srcDir 'resources'
            include '**/*.properties'
            include '**/*.png'
            include '**/*.gif'
            include '**/*.jpg'
            include '**/*.html'
            include '**/*.js'
            include '**/*.sh'
            include '**/*.dat'
            include '**/*.icc'
            exclude '**/*.DS_Store'

			srcDir '../frostwire-common/mp4parser'
			include '**/*.properties'
			exclude '**/*.java'
        }
    }
}

jar {
    archiveName='frostwire.jar'

    exclude('META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF')

    from (zipTree('lib/jars/messages.jar')) {
        include '**/*.class'
    }

    manifest {
        attributes 'Main-Class': 'com.limegroup.gnutella.gui.Main'
    }
}

// gettext tasks

task gettextInit {
    description 'Loads and define the ant gettext related tasks'

    doLast {
        ant.taskdef(name:'gettextExtract', classname:'org.xnap.commons.ant.gettext.GettextExtractKeysTask', classpath: 'lib/jars/gettext-commons.jar')
        ant.taskdef(name:'gettextMerge', classname:'org.xnap.commons.ant.gettext.GettextMergeKeysTask', classpath: 'lib/jars/gettext-commons.jar')
        ant.taskdef(name:'gettextGenerateDefault', classname:'org.xnap.commons.ant.gettext.GenerateDefaultBundleTask', classpath: 'lib/jars/gettext-commons.jar')
        ant.taskdef(name:'gettextDist', classname:'org.xnap.commons.ant.gettext.GettextDistTask', classpath:'lib/jars/gettext-commons.jar')
    }
}

task gettextExtract {
    description 'Extracts message keys from the source code'

    doLast {
        println 'gettext extract...'
        ant.gettextExtract(keysFile:'frostwire.pot',
                           poDirectory:'lib/messagebundles',
                           keywords:'-kgetStringResource -kgetFormattedStringResource -ktrc -ktr -kmarktr -ktrn:1,2 -ktrl') {
            fileset(dir:"src") {
                include(name:'**/*.java')
            }
        }

        println 'gettext merge...'
        ant.gettextMerge(keysFile:"frostwire.pot", poDirectory:"lib/messagebundles")
    }
}

task gettextBundle {
    description 'Rebuilds messages and bundles them into messages.jar'

    doLast {
        // clean up
        println 'gettext bundle...'
        println 'cleaning up...'        
        delete 'lib/messagebundles/org'

        // generate default bundle for complete messages
        println 'gettext generate default'
        ant.gettextGenerateDefault(targetBundle:'org.limewire.i18n.Messages',
                                   outputDirectory:'lib/messagebundles', 
                                   potfile:'lib/messagebundles/frostwire.pot')

        // generate complete bundles
        println 'gettext dist (complete bundles)'
        ant.gettextDist(targetBundle:'org.limewire.i18n.Messages',
                        poDirectory:'lib/messagebundles',
                        outputDirectory:'lib/messagebundles',
                        percentage:'35')

        // generate the empty en.po file without percentage
        println 'gettext dist (empty en.po file without percentage)'
        ant.gettextDist(targetBundle:'org.limewire.i18n.Messages',
                        outputDirectory:'lib/messagebundles') {
            fileset(dir:'lib/messagebundles') {
                include(name:'en.po')
            }
        }

        // jar them
        println 'jar it...'
        ant.jar(destfile:'lib/jars/messages.jar',
                basedir:'lib/messagebundles',
                includes:"org/**")

        // clean up
        println 'cleaning up...'
        delete 'lib/messagebundles/org'
    }
}

//mainClassName = "com.limegroup.gnutella.gui.Main"

gettextExtract.dependsOn gettextInit
gettextBundle.dependsOn gettextInit
